datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post Post[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String               @id @default(uuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  role               Role                 @default(USER)
  posts              Post[]               @relation("WrittenPosts")
  savedPosts         SavedPost[]          @relation("UserSaved")
  ratedPosts         RatedPost[]          @relation("UserRating")
  Comment            Comment[]
  InteractionComment CommentInteraction[]
  Notification       Notification[]
  Friend             Friend[]             @relation("FriendRequest")
  friendRequest      Friend[]             @relation("FriendRequestReceived")
  ReportComment      ReportComment[]
  Following          Follow[]             @relation("Following")
  FollowedBy         Follow[]             @relation("FollowedBy")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  private     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Account     Account? @relation(fields: [accountId], references: [id])
  accountId   String?
  deleted     Boolean  @default(false)

  author   User   @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId String

  savedPost SavedPost[] @relation("SavedPost")
  ratedPost RatedPost[] @relation("RatedPost")
  Comment   Comment[]
}

model SavedPost {
  id      String   @id @default(uuid())
  saved   Boolean
  savedAt DateTime @updatedAt
  Post    Post     @relation("SavedPost", fields: [postId], references: [id])
  User    User     @relation("UserSaved", fields: [userId], references: [id])
  userId  String
  postId  String

  @@unique([userId, postId])
}

model RatedPost {
  id      String   @id @default(uuid())
  rating  Float?
  ratedAt DateTime @updatedAt
  Post    Post     @relation("RatedPost", fields: [postId], references: [id])
  User    User     @relation("UserRating", fields: [userId], references: [id])
  userId  String
  postId  String

  @@unique([userId, postId])
}

model Comment {
  id                 String               @id @default(uuid())
  post               Post                 @relation(fields: [postId], references: [id])
  postId             String
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  comment            String               @db.Text
  createdAt          DateTime             @default(now())
  CommentInteraction CommentInteraction[]
  ReportComment      ReportComment[]
}

model CommentInteraction {
  id          String       @id @default(uuid())
  comment     Comment?     @relation(fields: [commentId], references: [id])
  commentId   String?
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  interaction Interaction?

  @@unique([commentId, userId])
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("FollowedBy", fields: [userId], references: [id])
  userId    String
  byUser    User     @relation("Following", fields: [byUserId], references: [id])
  byUserId  String
  follow    Boolean  @default(true)

  @@unique([byUserId, userId])
}

model Friend {
  id       String   @id @default(uuid())
  date     DateTime @default(now())
  accepted Boolean  @default(false)
  byUser   User     @relation("FriendRequest", fields: [byUserId], references: [id])
  byUserId String
  toUser   User     @relation("FriendRequestReceived", fields: [toUserId], references: [id])
  toUserId String

  @@unique([byUserId, toUserId])
}

model Notification {
  id        String        @id @default(uuid())
  date      String        @db.Text
  createdAt DateTime      @updatedAt
  severity  NotifSeverity @default(INFO)
  read      Boolean       @default(false)
  user      User          @relation(fields: [userId], references: [id])
  userId    String
}

model ReportComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  by        User?    @relation(fields: [userId], references: [id])
  userId    String?
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([commentId, userId])
}

// model Achievement {} ?

enum NotifSeverity {
  WARN
  DANGER
  INFO
}

enum Interaction {
  LIKE
  DISLIKE
}

enum Role {
  USER
  ADMIN
}
