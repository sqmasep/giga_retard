datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post Post[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  PostRating    PostRating[]
  PostSaved     PostSaved[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String       @id @default(uuid())
  title       String
  description String
  private     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  Account     Account?     @relation(fields: [accountId], references: [id])
  accountId   String?
  PostRating  PostRating[]
  PostSaved   PostSaved[]
}

model PostRating {
  id     String @id @default(uuid())
  note   Int
  by     User   @relation(fields: [userId], references: [id])
  userId String
  for    Post   @relation(fields: [postId], references: [id])
  postId String
}

model PostSaved {
  id     String @id @default(uuid())
  by     User   @relation(fields: [userId], references: [id])
  userId String
  for    Post   @relation(fields: [postId], references: [id])
  postId String
}
